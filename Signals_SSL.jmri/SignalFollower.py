# Has one SignalHead follow the state of another/
# Use this is you have e.g. a "repeater" signal head
# on the fascia that shows the appearance of a head
# on the layout
#
# Author: Bob Jacobsen, copyright 2016
# Part of the JMRI distribution

# modified and extended 2020 O Schreibke
# Reflects the status generated by the default ssl processing onto SBB Light signals

import jmri
import java
import java.beans

# Define the listeners. 
class SignalFollowerListener(java.beans.PropertyChangeListener):
# For Continue and Diverge, simply follow the source signal.

# If it's showing Red or flashing Red the target will be red.
# otherwise show green 

  def set(self, oSource, oTarget) :
    self.oSource = oSource  
    self.oTarget = oTarget
    self.oSource.addPropertyChangeListener(self)
    return
    
  def propertyChange(self, event):
    if self.oSource.getAppearanceName().endswith("Red"):
        self.oTarget.setState(1)  # red
    else:
        self.oTarget.setState(16) # green
        
    oAdvance = signals.getSignalHead(self.oTarget.userName + " Advance")
    if oAdvance:
        oAdvance.setState(self.oTarget.getState())
    return

class SignalFollowerListenerThroat(java.beans.PropertyChangeListener):
# For throat signals, the output depends on the signal combinations of the upper and lower heads

# If both are Red, show Red
# If the upper head is not red, set the follower to Green (FB1)
# if the lower head is not rec, set the follower to Yellow (FB2)
  
  def set(self, oSourceUpper, oSourceLower, oTarget) :
    self.oSourceUpper = oSourceUpper  
    self.oSourceLower = oSourceLower
    self.oTarget = oTarget
    self.oSourceUpper.addPropertyChangeListener(self)
    self.oSourceLower.addPropertyChangeListener(self)
    return
    
  def propertyChange(self, event):
    if self.oSourceUpper.getAppearanceName().endswith("Red") and self.oSourceLower.getAppearanceName().endswith("Red"):
        self.oTarget.setState(1)  # red
    else:
        if not(self.oSourceUpper.getAppearanceName().endswith("Red")):
            self.oTarget.setState(16) # green
        else:
            # The lower signal cannot be at red
            self.oTarget.setState(4) # yellow

    oAdvance = signals.getSignalHead(self.oTarget.userName + " Advance")
    if oAdvance:
        oAdvance.setState(self.oTarget.getState())
        
    return


# iterate over the signals collection, and set the event listeners
for sn in signals.getNamedBeanSet():
    if sn.userName[0] != "v" and not(sn.userName.endswith(" Advance")):
        oTarget = sn
        #print oTarget.userName
        #srcName = "v" + oTarget.userName
        if oTarget.userName.endswith(" Throat"):
            srcName = oTarget.userName.replace(" Throat", "")
            oSource1 = signals.getSignalHead("v" + srcName + " Continue")
            oSource2 = signals.getSignalHead("v" + srcName + " Diverge")
            if oSource1 and oSource2:
                SignalFollowerListenerThroat().set(oSource1, oSource2, oTarget)
            else:
                print "could not set SignalFollowerListenerThroat for " + oTarget.userName + ", object not found"
        else:
            oSource = signals.getSignalHead("v" + oTarget.userName)
            if oSource:
                SignalFollowerListener().set(oSource, oTarget)
            else:
                print "could not set SignalFollowerListener for " + oTarget.userName + " , object not found"
  
